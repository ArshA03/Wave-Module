{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Wave Module documentation","text":"<p>This documentation aims to serve as a guide for prospective users of Wave_Module, which is a helpful Python module for analyzing waveforms and Non-Destructive Maintenance (NDT) operation purposes.</p> <p>To better understand its functionality, it is better to use it through a related academic course, although the code is well understandable for self-learning intentions.</p>"},{"location":"#need-help","title":"Need help?","text":"<p>Feel free to ask questions under the Github repository. It is also highly recommended to check StackOverflow if there were any difficulties understanding the code structure.</p>"},{"location":"#license","title":"License","text":"<p>This module is built for academic purposes only. For any other purposes, the author's name should be mentioned as well as the GitHub repository.</p>"},{"location":"#authors","title":"Authors","text":"<ul> <li> <p>Arshia Afshar B.Sc. in Mechanical Engineering, Technical &amp; Engineering Faculty, IKIU</p> <p>With special thanks to my tutor and supervisor, Professor Majid Ghadiri.</p> </li> </ul>"},{"location":"help/","title":"Help","text":""},{"location":"help/#fast-fourier-transform","title":"Fast Fourier Transform","text":""},{"location":"help/#1-how-fft-works","title":"1. How FFT Works","text":"<p>Please watch this helpful Video on youtube to understand how FFT works:</p> <ul> <li>The number of frequency points in FFT spectrum is related to the number sample points of waveform.</li> </ul> <p>$$ Number\\ of\\ Frequency \\ Points = \\frac{N=Number\\ Data\\ Points}{2} \\ $$</p> <ul> <li>After deleting the data behind the Nyquist limit, the magnitudes should be doubled and divided by the number of samples.</li> </ul>"},{"location":"help/#2-frequency-resolution","title":"2. Frequency Resolution","text":"<p>The output of <code>find_peaks</code> method itself doesn't match with the real data and there is an offset while plotting the raw results. Therefore the results should be corrected.</p> <p>The problem is apparently the fact that the <code>find_peaks</code> method in <code>scipy.signal</code> has a frequency resolution of  1 Hz, therefore since we are dealing with a continuous frequency spectrum, the frequency resolution should be reformed by multiplying the obtained peak frequencies by the frequency resolution of our present waveform.</p> <p>$$ \\Delta F\\ (Frequency\\ Resolution) = \\frac{Fs= Sample\\ Rate}{N=number\\  of\\ sample\\  points} $$</p> <p>$$ Corrected\\ Peak\\ Values=(Current\\ Peak\\ Values)\\times\\Delta F $$</p> <p>For further details please check Frequency Resolution in FFT Spectrum</p>"},{"location":"installation/","title":"Installation","text":"<p>The only way to use this module is by cloning it from its github repository. If you have previous knowledge of cloning a repository you can skip this part.</p>"},{"location":"installation/#cloning-github-repo","title":"Cloning Github Repo","text":"<p>Open the command line and head to the folder you want your project to be placed in:</p> <pre><code>&gt;&gt;&gt; cd \"Your project folder\"\n</code></pre> <p>Then enter the following command:</p> <p>(This would download all the files in the repository in your local project folder.)</p> <pre><code>&gt;&gt;&gt; git clone https://github.com/ArshA03/Wave_Module.git\n</code></pre> <p>You can also directly download the repository from the GitHub by downloading the ZIP file as shown below:  </p> Downloading ZIP file from GitHub"},{"location":"installation/#importing-the-module","title":"Importing the module","text":"<p>In order to be able to import the module successfully into your project, you have to put the Wave_Module.py file in the same directory as your project; otherwise, you should add the path in which the module exists by <code>sys</code>. To do so, add the following line at the top of your script.</p> <pre><code>sys.path.append(r'THE Full Path To Wave_Module.py')\n</code></pre> <p>Then import the whole <code>Wave_Module</code> by adding the line below:</p> <pre><code>from Wave_Module import *\n</code></pre>"},{"location":"know_data/","title":"Get To Know Your Data","text":"<p>This simple module is written for academic purposes in order to help students get a grasp of practical coding. The specified vibration DataSet (IMS) mentioned earlier should be downloaded first, and its document should be read carefully.</p>"},{"location":"know_data/#ims-vibration-dataset","title":"IMS Vibration DataSet","text":"<p>After downloading the dataset, there will be three test folders, each containing files carrying vibration data. The differences between these tests and their files are fully explained in the original document.</p> <p>Below is a screenshot of the document inside the IMS data set:</p> ScreenShot of the IMS Document <p>There are 3 sets of tests, and the number of files and the channels included are specified for each set. Also, the kind of failure at the end of each set is written in the description part.</p> <p>The format of files carrying data in ASCII. ASCII is a character encoding standard or a numerical representation of a character.</p>"},{"location":"know_data/#channels","title":"Channels","text":"<p>Channels are used to separate different routes of data acquisition. For instance, a two-channel bearing vibration data represents two different vibration signals for a single bearing often acquired with two probes perpendicular to each other!</p> Sensor Positioning <p>As you can see, there are four bearings tested in this data set. According to the documentation, there are 8 channels in Set 1 (Two channels for each of the 4 bearings) and 4 channels in both Set 2 &amp; 3 (One channel for each of the 4 bearings).</p> <p>These channels are separated by columns in the data files, and therefore a file with eight channels of vibration data consists of 8 columns of data points.</p> Channels &amp; Bearings In Set 1 Channels &amp; Bearings In Set 2&amp;3"},{"location":"know_data/#dates","title":"Dates","text":"<p>You should consider that dates help make a time series or forecast the data and help you specify healthy data from the unhealthy! For example, the data acquired on the first day of testing represents the healthy vibration data without any problem in the bearings. On the contrary, the last vibration data file in each set represents bearings with severe failure.</p>"},{"location":"know_module/","title":"Get To Know The Module","text":""},{"location":"know_module/#module-structure","title":"Module Structure","text":"<p>To import the module successfully into your project, you have to put the Wave_Module.py file in the same directory as your project.</p> <p>The module consists of two classes and a function, with each of the classes being comprised of multiple methods:</p> <ol> <li> <p>Input (Function)</p> <p>This function is called for importing data to the project in a Pandas Data Frame structure. This module is built specifically for the Dataset mentioned above and should be changed for usage in other problems</p> </li> <li> <p>wave (Class)</p> <p>This class is the main class for finding the FFT and peak values of the vibrations signals.</p> <p>Methods:</p> <ul> <li> <p>time - This will return time points of waveform.</p> </li> <li> <p>FFT - This function performs the Fast-Fourier Transform on the waveform</p> </li> <li> <p>peaks - This function also helps to find the eminent peaks of the waveform</p> </li> </ul> </li> <li> <p>envelope (class)</p> <p>This class would help envelop tasks. Its functions are as same as wave class.</p> <p>Methods:</p> <ul> <li>waveform</li> <li>FFT</li> <li>peaks</li> </ul> </li> </ol> <p>To fully understand the module, you can get through each of these functions and classes step by step using the code blocks below. Download the User Guide.</p>"},{"location":"know_module/#user-guide","title":"User Guide","text":""},{"location":"know_module/#1-input-function","title":"1. Input Function","text":"<p>The <code>Input()</code> function is only used to make a Data Frame of the raw files. For this to work, you need to know the path of the files being analyzed. For instance, to analyze the first vibration data file in the Set 1, use the following code:</p> <pre><code>from Wave_Module import Input\n\n# The first file in **Set 1** in named 2003.10.22.12.06.24\n\ndata_set = Input(r'...\\2003.10.22.12.06.24')\n</code></pre> <ul> <li>Here, we created a vibration Dataset called <code>data_set</code></li> </ul> <p>The above code would make a data frame of all the data inside the file (Including data from every channel)! Therefore you should specify the channel you want to analyze.</p> <pre><code>import numpy\n\nwave_data = data_set['channel5'].to_numpy()  # Channel 5 is the first channel for Bearing 3\n</code></pre> <p>Channels can vary from Channel1 to Channel8 depending on the Set you are analyzing.</p>"},{"location":"know_module/#2-wave-class","title":"2. Wave Class","text":"<p>When the Dataset was built successfully, you can use the <code>wave()</code> class to perform various analyses on your Dataset. Firstly, you should define your Dataset as a wave to use the functions of the <code>wave()</code> class.</p> <p>For a Dataset to be identified as a wave, you should know the sampling frequency or sample rate of your vibration data which, in this case, we have a sample rate of 20KHz.</p> <pre><code>from Wave_Module import wave\n\nwave_object = wave(data=wave_data, Fs=20000)\n</code></pre> <p>The <code>wave()</code> class consists of three methods, each of which returns different outputs:</p> <ul> <li><code>time()</code> Calculates the duration of the waveform</li> <li><code>FFT()</code> Calculates the FFT (Fast Fourier transform) of the waveform</li> <li><code>peaks()</code> Calculates the peaks in the frequency spectrum</li> </ul>"},{"location":"know_module/#21-time-method","title":"2.1. Time Method","text":"<p>The time method would be helpful when you are trying to make a plot of your waveform, and this would return the time points related to the duration and sample rate of your waveform.</p> <p>To adopt this method in your code, you can call the <code>time()</code> method from objects of type wave. You can picture your waveform by doing so:</p> <pre><code>import matplotlib.pyplot as plt\n\nwave_time = wave_object.time()\n\n############## Plotting the Time WaveForm ##################\nfig, ax = plt.subplots(constrained_layout=True, figsize=(10, 6))\n\nax.set_title('Time WaveForm')\nax.plot(wave_time, wave_data, color='k')\nax.set_xlim(0,1)\nax.set_ylabel('Amplitude')\nax.set_xlabel('Time (s)')\n</code></pre> <p>This would plot the wavelength while X being the time data and Y being the amplitudes related to X.</p> <p>Check the Matplotlib documents for more information</p>"},{"location":"know_module/#22-fft-method","title":"2.2. FFT Method","text":"<p>This method helps you calculate the fast Fourier transform of the waveform. This method has two outputs, one of which is the frequencies present in the waveform, and the other output is the magnitudes relative to each frequency.</p> <p>You can call <code>FFT()</code> method from wave objects:</p> <pre><code>freqs, mags = wave_object.FFT()  # Returns frequencies and their presented magnitudes\n\n############# Plotting the FFT Spectrum ####################\nfig, ax = plt.subplots(constrained_layout=True, figsize=(10, 6))\nax.set_title('FFT Spectrum')\nax.plot(freqs, mags)\nax.set_ylim(0, 0.1)\nax.set_xlim(0, 10000)\nax.set_xlabel('Frequency in Hertz [Hz]')\nax.set_ylabel('Frequency Domain (Spectrum) Magnitude')\n</code></pre>"},{"location":"know_module/#23-peaks-method","title":"2.3. Peaks Method","text":"<p>This method helps you find the peaks in the FFT spectrum. This method's attributes are <code>prominence, threshold, height, width, distance</code>, which are the same attributes for <code>find_peaks</code> in SciPy. Each of the mentioned attributes could be changed or left empty (None by default) for the best result.</p> Peaks Method Attributes <p>You can find more about these attributes in SciPy Reference Guide.</p> <pre><code>peaks = wave_object.peaks(prominence= 100)  # Healthy peaks location\n\n# N is equal to Fs/L where L (number of data points 20,480) and \n# Fs (Sample Rate 20000 Hz) do not change in different data\nN = 20000/20480\n\n########## Plotting the FFT Spectrum with peaks ############\nplt.figure(figsize=(15,8))\n\nplt.title('FFT Soectrum')\nplt.plot(freqs, mags)\nplt.ylim(0, 0.06)\nplt.xlim(0, 1000)\nplt.xlabel('Frequency in Hertz [Hz]')\nplt.ylabel('Frequency Domain Magnitude')\nplt.plot(peaks, mags[[int(i) for i in peaks/N]], \"x\")\n</code></pre> <p>For more information please check the Help page.</p>"},{"location":"know_module/#3-envelope-class","title":"3. Envelope Class","text":"<p>Envelope class is a nested class inside the wave class, Therefore there is no need to make an object from scratch.</p> <p>The <code>envelope</code> class consists of three methods, each of which returns different outputs:</p> <ul> <li><code>waveform()</code> Calculates the envelope of the waveform</li> <li><code>FFT()</code> Calculates the enveloped FFT (Fast Fourier transform) of the waveform</li> <li><code>peaks()</code> Calculates the enveloped FFT peaks in the frequency spectrum</li> </ul> <p>The peaks method in envelope class is a little different from the wave class. Here, when calling the peaks method from an envelope object, you are prompted to enter your desired peak attributes <code>prominence, threshold, height, width, distance</code> in the input box.</p> <p>For instance, if you want the attributes to be <code>prominence=50, threshold=130, height=None, width=None, distance=30</code>, you should enter the following line in the input box: 50,130,d,d,30</p> <p>Here, we used 'd' to leave the attribute blank or default</p> <p>In order to use either of these methods you can call <code>envelope('method')</code> from your wave object. For instance, to plot the enveloped waveform use the code block below:</p> <pre><code>env_wave = wave_object.envelope('waveform')\nenv_freqs, env_mags = wave_object.envelope('FFT')\nenv_peaks = wave_object.envelope('peaks')\n\nfig, (ax1, ax2) = plt.subplots(ncols=1, nrows=2, constrained_layout=True, figsize=(10, 6))\n\n############## Enveloped Time WaveForm ##################\nax1.set_title('Time WaveForm')\nax1.plot(wave_time, env_wave, color='k')\nax1.set_xlim(0,1)\nax1.set_ylabel('Amplitude')\nax1.set_xlabel('Time (s)')\n\n############# Enveloped FFT Spectrum ####################\nax2.set_title('FFT Spectrum')\nax2.plot(env_freqs, env_mags)\nax2.set_ylim(0, 0.6)\nax2.set_xlim(0, 1000)\nax2.set_xlabel('Frequency in Hertz [Hz]')\nax2.set_ylabel('Frequency Domain (Spectrum) Magnitude')\nplt.plot(env_peaks, env_mags[[int(i) for i in env_peaks/N]], \"x\")\n</code></pre> <p>As mentioned above, you can enter <code>50,130,d,d,30</code> when prompted for input! Change the numbers and find your optimal adjustment.</p>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#introduction","title":"Introduction","text":"<p>Wave Module is written in python 3.8, so any same version or above could be used. If there was an error while using the module, it is recommended to download Python 3.8 from Python.org.  </p> <p>There are examples provided so the user would find it easier to use the module for the first time. The Dataset, which is used as an example, is a bearing vibration data gathered by IMS Center and is downloadable from here.  </p> <p>Since the Dataset manual has stated the potential problems and reasons behind the failures, it is best used to validate the Dataset or the functions of the module itself.</p> <p>Basic knowledge of python is needed to comprehend the code, although it would be understood better with a specialist's help.</p>"},{"location":"overview/#prerequisites","title":"Prerequisites","text":"<p>The module is built on some well-known python packages. However, each of these packages is strong enough to perform such tasks, although this module's purpose is to grasp a basic knowledge of practical coding.</p> <p>You can see the required packages below:</p> <ul> <li>NumPy</li> <li>scipy</li> <li>matplotlib</li> <li>pandas</li> </ul> <p>These packages could be easily installed with <code>pip</code> module, which could be used after installing python. If you are not familiar with <code>pip</code>, just paste the following code in your command line:</p> <pre><code>pip install pandas numpy matplotlib scipy\n</code></pre>"}]}